bookkeeping () {
	RESET_DATE=`date --date="-1 month" +%s`
        
	if [ -f ${RECORD_LOG} ]; then
        	# read to associative array
        	declare -A records
        	while IFS== read -r key value; do
        	        records[$key]=$value
        	done < "${RECORD_LOG}"
	fi

       	# read 
        if [ "$#" -eq 1 ];then
		if [ -z "${records[$1]}" ];then
			# create record
			echo $1=$RESET_DATE >> ${RECORD_LOG}
			records[$1]=$RESET_DATE
                	echo ${records[$1]}
		else
			# read entry in bookkeeping log if record exists
                	echo ${records[$1]}
		fi
        else    
                # update record and save to file
                > ${RECORD_LOG} 
                records[$1]=$2
                for i in "${!records[@]}"; do
                        echo $i=${records[$i]} >> ${RECORD_LOG}
                done    
        fi      
}       

get_last_record () {
        local LAST_RECORD=`curl -sG 'http://localhost:8086/query?pretty=true' --data-urlencode "db=rigdata" --data-urlencode "epoch=ns" --data-urlencode \
                "q=$1" | jq -r '.results[0].series[0].values[0][0]'   `
        if (( LAST_RECORD == 0 )); then
                # Get epoch from 1 month ago and round it to 12:00am
                _TIME=`date -d "1 month ago" +%s`
                LAST_RECORD=$(( ${_TIME} - (${_TIME} % (24 * 60 * 60)) ))"000000000"
        fi
	echo ${LAST_RECORD} | awk '/[0-9]+/ {print substr($1,1,10) };'
}

